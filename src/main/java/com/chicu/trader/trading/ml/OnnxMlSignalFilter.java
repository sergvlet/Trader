package com.chicu.trader.trading.ml;

import ai.onnxruntime.OnnxTensor;
import ai.onnxruntime.OrtEnvironment;
import ai.onnxruntime.OrtException;
import ai.onnxruntime.OrtSession;
import com.chicu.trader.bot.entity.AiTradingSettings;
import com.chicu.trader.bot.service.AiTradingSettingsService;
import com.chicu.trader.trading.model.MarketData;
import com.chicu.trader.trading.model.MarketSignal;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Primary;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

import java.io.File;
import java.util.Collections;
import java.util.Map;

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ ML-–º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ ONNX.
 */
@Component
@Primary
@Order(1)
@RequiredArgsConstructor
@Slf4j
public class OnnxMlSignalFilter implements MlSignalFilter {

    private final AiTradingSettingsService settingsService;

    @Override
    public MarketSignal predict(Long chatId, MarketData data) {
        AiTradingSettings s = settingsService.getOrCreate(chatId);
        String path       = String.format(s.getMlModelPath(), chatId);
        String inputName  = s.getMlInputName();
        double threshold  = s.getMlThreshold();

        // –µ—Å–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ—Ç –Ω–∞ –¥–∏—Å–∫–µ ‚Äî –±—ã—Å—Ç—Ä–æ –≤—ã—Ö–æ–¥–∏–º
        if (!new File(path).exists()) {
            log.warn("‚ö†Ô∏è ML-–º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {}", path);
            return MarketSignal.SKIP;
        }

        try {
            // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Å–µ—Å—Å–∏–∏
            OrtEnvironment env = OrtEnvironment.getEnvironment();
            try (OrtSession session = env.createSession(path, new OrtSession.SessionOptions())) {

                // –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–Ω–∑–æ—Ä–∞
                float[][] inputData = data.toTensorInput();
                OnnxTensor inputTensor = OnnxTensor.createTensor(env, inputData);
                Map<String, OnnxTensor> inputs = Collections.singletonMap(inputName, inputTensor);

                // –∑–∞–ø—É—Å–∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
                OrtSession.Result output = session.run(inputs);
                float[][] result = (float[][]) output.get(0).getValue();
                float score = result[0][0];

                log.info("üß† [chatId={}] ML-–∏–Ω—Ñ–µ—Ä–µ–Ω—Å score = {}", chatId, score);
                return score >= threshold ? MarketSignal.BUY : MarketSignal.SKIP;
            }
        } catch (OrtException | UnsatisfiedLinkError | NoClassDefFoundError e) {
            // –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å ONNX Runtime, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ —Å–∏–≥–Ω–∞–ª–∞
            log.error("‚ùå ONNX Runtime error, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ML-—Ñ–∏–ª—å—Ç—Ä: {}", e.toString());
            return MarketSignal.SKIP;
        } catch (Exception e) {
            // –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äî —Ç–æ–∂–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            log.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ ML: {}", e.getMessage(), e);
            return MarketSignal.SKIP;
        }
    }
}
