package com.chicu.trader.trading.optimizer;

import com.chicu.trader.bot.entity.AiTradingSettings;
import com.chicu.trader.bot.service.AiTradingSettingsService;
import com.chicu.trader.trading.OptimizationResult;
import com.chicu.trader.trading.model.Candle;
import com.chicu.trader.trading.service.CandleService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.util.*;
import java.util.stream.Collectors;

/**
 * DailyOptimizer ‚Äî —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ AI-—Ä–µ–∂–∏–º–µ.
 * <p>
 * üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
 * ‚Äî –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ –ø–æ —Å–ø–∏—Å–∫—É –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä.
 * ‚Äî –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏ —Ç—Ä–µ–Ω–¥ –ø–æ –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ.
 * ‚Äî –í—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã (–ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —Ç—Ä–µ–Ω–¥–∞ –∫ –∞–º–ø–ª–∏—Ç—É–¥–µ).
 * ‚Äî –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ TP –∏ SL –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Ü–µ–Ω—ã.
 * ‚Äî –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π OptimizationResult, –≥–æ—Ç–æ–≤—ã–π –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é.
 * <p>
 * ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ AiTradingSettings (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ø–∏—Å–æ–∫ –ø–∞—Ä, —Ç–∞–π–º—Ñ—Ä–µ–π–º, topN –∏ –ø—Ä.)
 * üìä –í—Å–µ —Ä–∞—Å—á—ë—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º —Å –±–∏—Ä–∂–∏ —á–µ—Ä–µ–∑ CandleService.
 * <p>
 * TODO:
 * - [ ] –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á—ë—Ç ATR / Bollinger Bands / RSI –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏.
 * - [ ] –£—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏.
 * - [ ] –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ —Å—Ä–µ–¥–Ω–µ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏).
 * - [ ] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SPOT / FUTURES).
 * - [ ] –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ Telegram.
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class DailyOptimizer {

    private final AiTradingSettingsService aiSettingsService;
    private final CandleService candleService;

    public OptimizationResult optimizeAllForChat(Long chatId) {
        log.info("üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è chatId={}", chatId);

        AiTradingSettings settings = aiSettingsService.getOrCreate(chatId);

        List<String> symbols = getSymbols(settings);
        Duration timeframe = parseTimeframe(settings.getTimeframe());
        int candleLimit = Optional.ofNullable(settings.getCachedCandlesLimit()).orElse(500);

        Map<String, Double> profitMap = new HashMap<>();
        Map<String, List<Candle>> allCandles = new HashMap<>();

        for (String symbol : symbols) {
            List<Candle> candles = candleService.history(symbol, timeframe, candleLimit);
            if (candles.size() < 50) {
                log.warn("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è symbol={} ({} —Å–≤–µ—á–µ–π)", symbol, candles.size());
                continue;
            }

            double score = estimateProfitability(candles);
            profitMap.put(symbol, score);
            allCandles.put(symbol, candles);
        }

        List<String> selected = profitMap.entrySet().stream()
                .sorted(Map.Entry.<String, Double>comparingByValue().reversed())
                .limit(settings.getTopN())
                .map(Map.Entry::getKey)
                .collect(Collectors.toList());

        List<Candle> merged = selected.stream()
                .flatMap(s -> allCandles.get(s).stream())
                .collect(Collectors.toList());

        double recommendedTp = computeDynamicTp(merged);
        double recommendedSl = computeDynamicSl(merged);

        log.info("üìä –í—ã–±—Ä–∞–Ω—ã –ø–∞—Ä—ã: {}, TP=%.4f, SL=%.4f", selected, recommendedTp, recommendedSl);

        return OptimizationResult.builder()
                .tp(recommendedTp)
                .sl(recommendedSl)
                .symbols(selected)
                .topN(settings.getTopN())
                .timeframe(settings.getTimeframe())
                .riskThreshold(settings.getRiskThreshold())
                .maxDrawdown(settings.getMaxDrawdown())
                .leverage(settings.getLeverage())
                .maxPositions(settings.getMaxPositions())
                .tradeCooldown(settings.getTradeCooldown())
                .slippageTolerance(settings.getSlippageTolerance())
                .orderType(settings.getOrderType())
                .notificationsEnabled(settings.getNotificationsEnabled())
                .modelVersion(settings.getModelVersion())
                .build();
    }

    private List<String> getSymbols(AiTradingSettings settings) {
        String symbolsStr = Optional.ofNullable(settings.getSymbols()).orElse("BTCUSDT,ETHUSDT");
        return Arrays.stream(symbolsStr.split(","))
                .map(String::trim)
                .filter(s -> !s.isBlank())
                .collect(Collectors.toList());
    }

    private Duration parseTimeframe(String tf) {
        if (tf == null) return Duration.ofHours(1);
        return switch (tf.toLowerCase()) {
            case "1m" -> Duration.ofMinutes(1);
            case "5m" -> Duration.ofMinutes(5);
            case "15m" -> Duration.ofMinutes(15);
            case "1h" -> Duration.ofHours(1);
            case "4h" -> Duration.ofHours(4);
            case "1d" -> Duration.ofDays(1);
            default -> Duration.ofHours(1);
        };
    }

    private double estimateProfitability(List<Candle> candles) {
        double open = candles.get(0).getOpen();
        double close = candles.get(candles.size() - 1).getClose();
        double change = (close - open) / open;

        double sumRange = candles.stream()
                .mapToDouble(c -> c.getHigh() - c.getLow())
                .sum();
        double avgRange = sumRange / candles.size();

        if (avgRange == 0) return 0.0;
        return change / avgRange;
    }

    private double computeDynamicTp(List<Candle> candles) {
        List<Double> positives = candles.stream()
                .map(c -> c.getClose() - c.getOpen())
                .filter(v -> v > 0)
                .map(v -> v / candles.get(0).getOpen())
                .toList();
        return positives.stream().mapToDouble(d -> d).average().orElse(0.03);
    }

    private double computeDynamicSl(List<Candle> candles) {
        List<Double> negatives = candles.stream()
                .map(c -> c.getOpen() - c.getClose())
                .filter(v -> v > 0)
                .map(v -> v / candles.get(0).getOpen())
                .toList();
        return negatives.stream().mapToDouble(d -> d).average().orElse(0.01);
    }
}
