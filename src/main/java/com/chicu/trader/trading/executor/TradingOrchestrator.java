package com.chicu.trader.trading.executor;

import com.chicu.trader.bot.entity.AiTradingSettings;
import com.chicu.trader.bot.service.AiTradingSettingsService;
import com.chicu.trader.trading.entity.ProfitablePair;
import com.chicu.trader.trading.service.ProfitablePairService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class TradingOrchestrator {

    private final AiTradingSettingsService settingsService;
    private final ProfitablePairService pairService;
    private final TradingStrategyProcessor strategyProcessor;

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥.
     */
    @Scheduled(fixedRate = 15_000)
    public void execute() {
        log.info("üöÄ –ó–∞–ø—É—Å–∫ TradingOrchestrator 2.0");

        List<AiTradingSettings> allSettings = settingsService.getAllActiveTrading();
        for (AiTradingSettings settings : allSettings) {
            Long chatId = settings.getChatId();
            List<ProfitablePair> pairs = pairService.getActivePairs(chatId);

            for (ProfitablePair pair : pairs) {
                strategyProcessor.processSymbol(chatId, pair);
            }
        }
    }
}
