package com.chicu.trader.trading.executor;

import com.chicu.trader.bot.entity.AiTradingSettings;
import com.chicu.trader.trading.entity.TradeLog;
import com.chicu.trader.trading.repository.TradeLogRepository;
import com.chicu.trader.trading.risk.RiskManager;
import com.chicu.trader.trading.service.binance.BinanceExchangeInfoService;
import com.chicu.trader.trading.service.binance.OrderService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.Instant;

@Slf4j
@Component
@RequiredArgsConstructor
public class TradingEntryManager {

    private final TradeLogRepository tradeLogRepository;
    private final OrderService orderService;
    private final BinanceExchangeInfoService exchangeInfoService;
    private final RiskManager riskManager;

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç MARKET BUY –æ—Ä–¥–µ—Ä, –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ symbol.
     */
    public void enterTrade(Long chatId,
                           String symbol,
                           double price,
                           AiTradingSettings settings) {

        // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–∏
        if (tradeLogRepository.existsByUserChatIdAndSymbolAndIsClosedFalse(chatId, symbol)) {
            log.info("‚õî –£–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞ –¥–ª—è {} (chatId={})", symbol, chatId);
            return;
        }

        // 2) –í—ã—á–∏—Å–ª—è–µ–º "—Å—ã—Ä–æ–π" —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —É RiskManager
        double rawQty = riskManager.calculatePositionSize(chatId, symbol, price, settings);
        if (rawQty <= 0) {
            log.warn("‚ö† –ù—É–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞: chatId={} symbol={}", chatId, symbol);
            return;
        }

        // 3) –û–∫—Ä—É–≥–ª—è–µ–º rawQty –ø–æ —à–∞–≥—É –ª–æ—Ç–∞ (stepSize)
        BigDecimal stepSize = exchangeInfoService.getLotStepSize(symbol);
        BigDecimal qtyBd   = BigDecimal.valueOf(rawQty);
        if (stepSize.compareTo(BigDecimal.ZERO) > 0) {
            int scale = stepSize.stripTrailingZeros().scale();
            qtyBd = qtyBd.setScale(scale, RoundingMode.DOWN);
        }
        if (qtyBd.compareTo(stepSize) < 0) {
            log.warn("‚ö† –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞ {} –¥–ª—è symbol={}", qtyBd, stepSize, symbol);
            return;
        }

        // 4) –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å MARKET BUY
        try {
            orderService.placeMarketBuy(chatId, symbol, qtyBd);
            log.info("‚úÖ –†–∞–∑–º–µ—â–µ–Ω MARKET BUY: chatId={} symbol={} qty={}", chatId, symbol, qtyBd);
        } catch (Exception ex) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è BUY: chatId={} symbol={} qty={} ‚Äî {}",
                      chatId, symbol, qtyBd, ex.getMessage(), ex);
            return;
        }

        // 5) –õ–æ–≥–∏—Ä—É–µ–º —Å–¥–µ–ª–∫—É –≤ –±–∞–∑–µ
        TradeLog logEntry = TradeLog.builder()
                .userChatId(chatId)
                .symbol(symbol)
                .entryTime(Instant.now())
                .entryPrice(price)
                .quantity(qtyBd.doubleValue())
                .isClosed(false)
                .build();
        tradeLogRepository.save(logEntry);

        log.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω TradeLog: chatId={} symbol={} qty={} entry={}",
                 chatId, symbol, qtyBd, price);
    }
}
