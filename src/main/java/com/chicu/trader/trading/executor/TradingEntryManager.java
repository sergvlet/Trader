package com.chicu.trader.trading.executor;

import com.chicu.trader.bot.entity.AiTradingSettings;
import com.chicu.trader.trading.entity.TradeLog;
import com.chicu.trader.trading.repository.TradeLogRepository;
import com.chicu.trader.trading.risk.RiskManager;
import com.chicu.trader.trading.service.binance.BinanceExchangeInfoService;
import com.chicu.trader.trading.service.binance.OrderService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.Instant;

@Slf4j
@Component
@RequiredArgsConstructor
public class TradingEntryManager {

    private final TradeLogRepository tradeLogRepository;
    private final OrderService orderService;
    private final BinanceExchangeInfoService exchangeInfoService;
    private final RiskManager riskManager;

    public void enterTrade(Long chatId, String symbol, double price, AiTradingSettings settings) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞
        boolean hasOpen = tradeLogRepository.existsByUserChatIdAndSymbolAndIsClosedFalse(chatId, symbol);
        if (hasOpen) {
            log.info("‚õî –£–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞ –ø–æ {} –¥–ª—è chatId={}", symbol, chatId);
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç RiskManager
        double qty = riskManager.calculatePositionSize(chatId, symbol, price, settings);
        if (qty <= 0) {
            log.warn("‚ö† –ù—É–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞: chatId={} symbol={}", chatId, symbol);
            return;
        }

        // –û–∫—Ä—É–≥–ª—è–µ–º –ø–æ–¥ stepSize
        BigDecimal stepSize = exchangeInfoService.getLotSizeStep(symbol);
        BigDecimal qtyRounded = BigDecimal.valueOf(qty).divide(stepSize, 0, RoundingMode.DOWN).multiply(stepSize);
        double finalQty = qtyRounded.doubleValue();
        if (finalQty < stepSize.doubleValue()) {
            log.warn("‚ö† –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞: chatId={} symbol={}", chatId, symbol);
            return;
        }

        // –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
        try {
            orderService.placeMarketBuy(chatId, symbol, BigDecimal.valueOf(finalQty));
            log.info("‚úÖ BUY market order placed: chatId={} symbol={} qty={}", chatId, symbol, finalQty);
        } catch (Exception e) {
            log.error("‚ùå Failed to place BUY order: chatId={} symbol={} qty={}: {}", chatId, symbol, finalQty, e.getMessage());
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É –≤ –ª–æ–≥
        TradeLog tradeLog = TradeLog.builder()
                .userChatId(chatId)
                .symbol(symbol)
                .entryTime(Instant.now())
                .entryPrice(price)
                .quantity(finalQty)
                .isClosed(false)
                .build();

        tradeLogRepository.save(tradeLog);
        log.info("üíæ TradeLog –∑–∞–ø–∏—Å–∞–Ω: chatId={} symbol={} qty={} entry={}", chatId, symbol, finalQty, price);
    }
}
