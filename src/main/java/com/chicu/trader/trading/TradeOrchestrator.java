package com.chicu.trader.trading;

import com.chicu.trader.bot.entity.AiTradingSettings;
import com.chicu.trader.bot.service.AiTradingSettingsService;
import com.chicu.trader.trading.entity.ProfitablePair;
import com.chicu.trader.trading.entity.TradeLog;
import com.chicu.trader.trading.risk.RiskManager;
import com.chicu.trader.trading.service.PriceService;
import com.chicu.trader.trading.service.binance.OrderService;
import com.chicu.trader.trading.service.binance.client.BinanceRestClientFactory;
import com.chicu.trader.trading.service.binance.client.model.ExchangeInfo;
import com.chicu.trader.trading.util.QuantityAdjuster;
import com.chicu.trader.trading.repository.TradeLogRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.time.Instant;
import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class TradeOrchestrator {

    private final AiTradingSettingsService settingsService;
    private final PriceService             priceService;
    private final RiskManager               riskManager;
    private final OrderService              orderService;
    private final BinanceRestClientFactory  clientFactory;
    private final TradeLogRepository        repo;

    public void apply(Long chatId, List<ProfitablePair> pairs) {
        // 1) –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        AiTradingSettings settings = settingsService.getSettingsOrThrow(chatId);

        // 2) –û–¥–∏–Ω —Ä–∞–∑ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
        ExchangeInfo exchangeInfo =
                clientFactory.getClient(chatId).getExchangeInfo();

        for (ProfitablePair p : pairs) {
            String symbol = p.getSymbol();
            try {
                // 3) –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
                BigDecimal price = priceService.getPrice(chatId, symbol);
                if (price == null) {
                    log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {}", symbol);
                    continue;
                }

                // 4) –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —à–∞–≥—É
                double rawSize = riskManager.calculatePositionSize(
                        chatId, symbol, price.doubleValue(), settings
                );
                BigDecimal qty = QuantityAdjuster.adjustQuantity(
                        symbol, BigDecimal.valueOf(rawSize), exchangeInfo
                );
                if (qty.compareTo(BigDecimal.ZERO) <= 0) {
                    log.warn("–ü–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ qty={} –¥–ª—è {} —Å–ª–∏—à–∫–æ–º –º–∞–ª ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", rawSize, symbol);
                    continue;
                }

                // 5) MARKET BUY ‚Üí –ø–æ–ª—É—á–∞–µ–º clientOrderId
                String entryId = orderService.placeMarketBuy(chatId, symbol, qty);

                // 6) –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º TP/SL
                BigDecimal tp = price.multiply(
                        BigDecimal.valueOf(1 + p.getTakeProfitPct() / 100.0)
                );
                BigDecimal sl = price.multiply(
                        BigDecimal.valueOf(1 - p.getStopLossPct() / 100.0)
                );

                // 7) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥ –≤ –ë–î, –≤–∫–ª—é—á–∞—è TP/SL
                TradeLog entryLog = TradeLog.builder()
                        .userChatId(chatId)
                        .symbol(symbol)
                        .entryTime(Instant.now())
                        .entryPrice(price)
                        .quantity(qty)
                        .entryClientOrderId(entryId)
                        .takeProfitPrice(tp)
                        .stopLossPrice(sl)
                        .closed(false)
                        .build();
                repo.save(entryLog);

                log.info("üü¢ BUY {} @{} qty={} entryId={}", symbol, price, qty, entryId);

                // 8) –°—Ç–∞–≤–∏–º OCO-–æ—Ä–¥–µ—Ä –∏ –ø–æ–ª—É—á–∞–µ–º exitClientOrderId
                String exitId = orderService.placeOcoSell(chatId, symbol, qty, sl, tp);

                log.info("‚Üó OCO SELL {} SL={} TP={} exitId={}", symbol, sl, tp, exitId);

            } catch (Exception ex) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {}: {}", symbol, ex.getMessage(), ex);
            }
        }
    }
}
