package com.chicu.trader.trading.service;

import com.chicu.trader.bot.entity.AiTradingSettings;
import com.chicu.trader.model.SignalType;
import com.chicu.trader.strategy.TradeStrategy;
import com.chicu.trader.trading.model.Candle;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;

@Slf4j
@Service
@RequiredArgsConstructor
public class StrategyEngine {

    private final Map<String, TradeStrategy> strategies;

    public SignalType getSignal(Long chatId, String symbol, List<Candle> candles, AiTradingSettings settings) {
        String strategyCode = settings.getStrategy(); // ‚Üê –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ strategy –≤ AiTradingSettings
        if (strategyCode == null || strategyCode.isBlank()) {
            strategyCode = "RSI_EMA"; // —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }

        TradeStrategy strategy = strategies.get(strategyCode);
        if (strategy == null) {
            log.warn("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {}, –∏—Å–ø–æ–ª—å–∑—É–µ–º HOLD", strategyCode);
            return SignalType.HOLD;
        }

        log.debug("üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é {} –¥–ª—è chatId={}, symbol={}", strategyCode, chatId, symbol);
        return strategy.evaluate(candles, settings);
    }
}
