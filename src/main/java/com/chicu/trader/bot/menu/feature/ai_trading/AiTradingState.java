// src/main/java/com/chicu/trader/bot/menu/feature/ai_trading/AiTradingState.java
package com.chicu.trader.bot.menu.feature.ai_trading;

import com.chicu.trader.bot.menu.core.MenuService;
import com.chicu.trader.bot.menu.core.MenuState;
import com.chicu.trader.model.ProfitablePair;
import com.chicu.trader.repository.ProfitablePairRepository;
import com.chicu.trader.trading.TradingStatusService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.List;
import java.util.stream.Collectors;

@Component("ai_trading")
@RequiredArgsConstructor
public class AiTradingState implements MenuState {

    private final TradingStatusService statusService;
    private final ProfitablePairRepository pairRepo;

    @Override
    public String name() {
        return "ai_trading";
    }

    @Override
    public SendMessage render(Long chatId) {
        boolean running = statusService.isRunning(chatId);

        // –°—Ç—Ä–æ–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        String statusLine = running
                ? "‚ñ∂Ô∏è *–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞!*"
                : "‚ùå *–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*";

        // –°–ø–∏—Å–æ–∫ –ø–∞—Ä
        List<ProfitablePair> pairs = pairRepo.findByUserChatIdAndActiveTrue(chatId);
        String pairsLine = pairs.isEmpty()
                ? "_–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä_"
                : "_–ü–∞—Ä—ã_: " + pairs.stream()
                .map(ProfitablePair::getSymbol)
                .collect(Collectors.joining(", "));

        // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ
        String last = statusService.getLastEvent(chatId);
        String lastLine = (last == null || last.isBlank())
                ? "_–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö_"
                : "*–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ:* " + last;

        // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
        String text = String.join("\n",
                "*AI-—Ç–æ—Ä–≥–æ–≤–ª—è*",
                statusLine,
                pairsLine,
                lastLine,
                "",
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        );

        // –ö–Ω–æ–ø–∫–∏
        InlineKeyboardMarkup keyboard = InlineKeyboardMarkup.builder()
                .keyboard(List.of(
                        List.of(
                                InlineKeyboardButton.builder()
                                        .text(running ? "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞" : "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")
                                        .callbackData("ai_trading:start").build(),
                                InlineKeyboardButton.builder()
                                        .text(running ? "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é" : "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                                        .callbackData("ai_trading:stop").build()
                        ),
                        List.of(
                                InlineKeyboardButton.builder()
                                        .text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
                                        .callbackData("ai_trading:settings").build(),
                                InlineKeyboardButton.builder()
                                        .text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                                        .callbackData("ai_trading:statistics").build()
                        ),
                        List.of(
                                InlineKeyboardButton.builder()
                                        .text("üìã –û—Ä–¥–µ—Ä–∞")
                                        .callbackData("ai_trading:orders").build()
                        ),
                        List.of(
                                InlineKeyboardButton.builder()
                                        .text("‚Äπ –ù–∞–∑–∞–¥")
                                        .callbackData(MenuService.BACK).build()
                        )
                ))
                .build();

        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .parseMode("Markdown")
                .replyMarkup(keyboard)
                .build();
    }

    @Override
    public String handleInput(Update update) {
        if (!update.hasCallbackQuery()) {
            return name();
        }
        String data = update.getCallbackQuery().getData();
        return switch (data) {
            case "ai_trading:start", "ai_trading:stop"   -> name();
            case "ai_trading:settings"                   -> "ai_trading_settings";
            case "ai_trading:statistics"                 -> "ai_trading_statistics";
            case "ai_trading:orders"                     -> "ai_trading_orders";
            case MenuService.BACK                        -> MenuService.BACK;
            default                                      -> name();
        };
    }
}
