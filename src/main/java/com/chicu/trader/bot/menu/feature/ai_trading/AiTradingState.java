package com.chicu.trader.bot.menu.feature.ai_trading;

import com.chicu.trader.bot.menu.core.MenuService;
import com.chicu.trader.bot.menu.core.MenuState;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.List;

/**
 * –í—Ö–æ–¥ –≤ AI-—Ä–∞–∑–¥–µ–ª: –≤—ã–±–æ—Ä –ø–æ–¥–º–µ–Ω—é
 */
@Component
public class AiTradingState implements MenuState {

    private final InlineKeyboardMarkup keyboard;

    public AiTradingState() {
        InlineKeyboardButton settingsBtn = InlineKeyboardButton.builder()
            .text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            .callbackData("ai_trading:settings")
            .build();
        InlineKeyboardButton statsBtn = InlineKeyboardButton.builder()
            .text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            .callbackData("ai_trading:statistics")
            .build();
        InlineKeyboardButton ordersBtn = InlineKeyboardButton.builder()
            .text("üìã –û—Ä–¥–µ—Ä–∞")
            .callbackData("ai_trading:orders")
            .build();
        InlineKeyboardButton backBtn = InlineKeyboardButton.builder()
            .text("‚Äπ –ù–∞–∑–∞–¥")
            .callbackData(MenuService.BACK)
            .build();

        this.keyboard = InlineKeyboardMarkup.builder()
            .keyboard(List.of(
                List.of(settingsBtn, statsBtn),
                List.of(ordersBtn),
                List.of(backBtn)
            ))
            .build();
    }

    @Override
    public String name() {
        return "ai_trading";
    }

    @Override
    public SendMessage render(Long chatId) {
        String text = "*AI-—Ç–æ—Ä–≥–æ–≤–ª—è*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ AI-—Ä–µ–∂–∏–º–µ:";
        return SendMessage.builder()
            .chatId(chatId.toString())
            .text(text)
            .parseMode("Markdown")
            .replyMarkup(keyboard)
            .build();
    }

    @Override
    public String handleInput(Update update) {
        if (!update.hasCallbackQuery()) {
            return name();
        }
        String data = update.getCallbackQuery().getData();
        switch (data) {
            case "ai_trading:settings":
                return "ai_trading_settings";
            case "ai_trading:statistics":
                return "ai_trading_statistics";
            case "ai_trading:orders":
                return "ai_trading_orders";
            case MenuService.BACK:
                return MenuService.BACK;
            default:
                return name();
        }
    }
}
