// src/main/java/com/chicu/trader/bot/menu/feature/ai_trading/AiTradingBacktestingState.java
package com.chicu.trader.bot.menu.feature.ai_trading;

import com.chicu.trader.bot.entity.AiTradingSettings;
import com.chicu.trader.bot.menu.core.MenuState;
import com.chicu.trader.bot.service.AiTradingSettingsService;
import com.chicu.trader.strategy.StrategyType;
import com.chicu.trader.trading.backtest.BacktestResult;
import com.chicu.trader.trading.backtest.BacktestService;
import com.chicu.trader.trading.entity.ProfitablePair;
import com.chicu.trader.trading.service.ProfitablePairService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

@Component
@RequiredArgsConstructor
public class AiTradingBacktestingState implements MenuState {

    private final AiTradingSettingsService settingsService;
    private final ProfitablePairService pairService;
    private final BacktestService backtestService;

    // —Ö—Ä–∞–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —á—Ç–æ–± –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
    private final Map<Long, String> lastResults = new ConcurrentHashMap<>();

    @Override
    public String name() {
        return "ai_trading_settings_backtesting";
    }

    @Override
    public SendMessage render(Long chatId) {
        AiTradingSettings s = settingsService.getOrCreate(chatId);
        List<ProfitablePair> pairs = pairService.getActivePairs(chatId);

        String strat = Optional.ofNullable(s.getStrategy()).map(StrategyType::name).orElse("N/A");
        double comm = Optional.ofNullable(s.getCommission()).orElse(0.0);

        StringBuilder md = new StringBuilder("*‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:*\n");
        md.append("‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: `").append(strat).append("`\n");
        md.append("‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: `").append(String.format("%.2f%%", comm)).append("`\n");

        if (pairs.isEmpty()) {
            md.append("‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã: _–Ω–µ –≤—ã–±—Ä–∞–Ω—ã_\n");
        } else {
            md.append("‚Ä¢ –ü–∞—Ä—ã –∏ TP/SL:\n");
            for (ProfitablePair p : pairs) {
                double tp = Optional.ofNullable(p.getTakeProfitPct()).orElse(0.0);
                double sl = Optional.ofNullable(p.getStopLossPct()).orElse(0.0);
                md.append(String.format("  ‚Ä¢ `%s` ‚Üí TP: %.2f%%, SL: %.2f%%\n",
                        p.getSymbol(), tp, sl));
            }
        }

        if (lastResults.containsKey(chatId)) {
            md.append("\n").append(lastResults.remove(chatId));
        } else {
            md.append("\n–ù–∞–∂–º–∏—Ç–µ ‚ñ∂Ô∏è ¬´–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç¬ª, —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏.");
        }

        var kb = InlineKeyboardMarkup.builder().keyboard(List.of(
                List.of(InlineKeyboardButton.builder()
                        .text("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç")
                        .callbackData(name() + ":run")
                        .build()),
                List.of(InlineKeyboardButton.builder()
                        .text("‚Äπ –ù–∞–∑–∞–¥")
                        .callbackData("ai_trading_settings")
                        .build())
        )).build();

        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(md.toString())
                .parseMode("Markdown")
                .replyMarkup(kb)
                .build();
    }

    @Override
    public String handleInput(Update u) {
        if (!u.hasCallbackQuery()) return name();

        String data = u.getCallbackQuery().getData();
        Long chatId = u.getCallbackQuery().getMessage().getChatId();

        if (data.equals(name() + ":run")) {
            BacktestResult res = backtestService.runBacktest(chatId);
            double pnl     = res.getTotalPnl() * 100;
            double winRate = res.getWinRate() * 100;
            int trades     = res.getTotalTrades();

            StringBuilder out = new StringBuilder()
                    .append("*üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞:*\n")
                    .append(String.format("‚Ä¢ –°–¥–µ–ª–æ–∫: `%d`\n", trades))
                    .append(String.format("‚Ä¢ Win-rate: `%.2f%%`\n", winRate))
                    .append(String.format("‚Ä¢ –û–±—â–∏–π PnL: `%.2f%%`\n", pnl));

            var losers = res.getLosingSymbols();
            if (!losers.isEmpty()) {
                out.append("\n‚ö†Ô∏è –£–±—ã—Ç–æ—á–Ω—ã–µ –ø–∞—Ä—ã:\n");
                losers.forEach(sym -> out.append("‚Ä¢ `").append(sym).append("`\n"));
            }
            out.append("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ TP/SL –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.");

            lastResults.put(chatId, out.toString());
        }

        return name();
    }
}
