package com.chicu.trader.bot.menu.feature.ai_trading;

import com.chicu.trader.bot.entity.AiTradingSettings;
import com.chicu.trader.bot.menu.core.MenuState;
import com.chicu.trader.bot.service.AiTradingSettingsService;
import com.chicu.trader.strategy.StrategyRegistry;
import com.chicu.trader.strategy.StrategySettings;
import com.chicu.trader.strategy.StrategyType;
import com.chicu.trader.trading.entity.ProfitablePair;
import com.chicu.trader.trading.model.BacktestResult;
import com.chicu.trader.trading.service.BacktestService;
import com.chicu.trader.trading.service.ProfitablePairService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

@Component
@RequiredArgsConstructor
public class AiTradingBacktestingState implements MenuState {

    private final AiTradingSettingsService settingsService;
    private final ProfitablePairService pairService;
    private final BacktestService backtestService;
    private final StrategyRegistry strategyRegistry;

    private final Map<Long, String> lastResults = new ConcurrentHashMap<>();

    @Override
    public String name() {
        return "ai_trading_settings_backtesting";
    }

    @Override
    public SendMessage render(Long chatId) {
        AiTradingSettings settings = settingsService.getOrCreate(chatId);
        List<ProfitablePair> pairs = pairService.getActivePairs(chatId);

        String strategy = Optional.ofNullable(settings.getStrategy()).map(StrategyType::name).orElse("N/A");
        double commission = Optional.ofNullable(settings.getCommission()).orElse(0.1);

        StringBuilder sb = new StringBuilder("*‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:*\n");
        sb.append("‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: `").append(strategy).append("`\n");
        sb.append("‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: `").append(String.format("%.2f%%", commission)).append("`\n");

        if (pairs.isEmpty()) {
            sb.append("‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã: _–Ω–µ –≤—ã–±—Ä–∞–Ω—ã_\n");
        } else {
            sb.append("‚Ä¢ –ü–∞—Ä—ã –∏ TP/SL:\n");
            for (ProfitablePair pair : pairs) {
                double tp = Optional.ofNullable(pair.getTakeProfitPct()).orElse(2.0);
                double sl = Optional.ofNullable(pair.getStopLossPct()).orElse(1.0);
                sb.append(String.format("  ‚Ä¢ `%s` ‚Üí TP: %.2f%%, SL: %.2f%%\n", pair.getSymbol(), tp, sl));
            }
        }

        if (lastResults.containsKey(chatId)) {
            sb.append("\n").append(lastResults.remove(chatId));
        } else {
            sb.append("\n–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç¬ª, —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º.");
        }

        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        keyboard.add(List.of(InlineKeyboardButton.builder()
                .text("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç")
                .callbackData(name() + ":run")
                .build()));
        keyboard.add(List.of(InlineKeyboardButton.builder()
                .text("‚Äπ –ù–∞–∑–∞–¥")
                .callbackData("ai_trading_settings")
                .build()));

        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(sb.toString())
                .parseMode("Markdown")
                .replyMarkup(InlineKeyboardMarkup.builder().keyboard(keyboard).build())
                .build();
    }

    @Override
    public String handleInput(Update u) {
        if (!u.hasCallbackQuery()) return name();

        String data = u.getCallbackQuery().getData();
        Long chatId = u.getCallbackQuery().getMessage().getChatId();

        if (data.endsWith(":run")) {
            BacktestResult result = backtestService.runBacktest(chatId);

            double pnl = result.getTotalPnl() * 100;
            double winRate = result.getWinRate() * 100;
            int count = result.getTotalTrades();

            StringBuilder msg = new StringBuilder();
            msg.append("*üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞:*\n");
            msg.append(String.format("‚Ä¢ –°–¥–µ–ª–æ–∫: `%d`\n", count));
            msg.append(String.format("‚Ä¢ Win-rate: `%.2f%%`\n", winRate));
            msg.append(String.format("‚Ä¢ –û–±—â–∏–π PnL: `%.2f%%`\n", pnl));

            List<String> losers = result.getLosingSymbols();
            if (!losers.isEmpty()) {
                msg.append("\n‚ö†Ô∏è –£–±—ã—Ç–æ—á–Ω—ã–µ –ø–∞—Ä—ã:\n");
                for (String sym : losers) {
                    msg.append("‚Ä¢ `").append(sym).append("`\n");
                }
            }

            msg.append("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ TP/SL –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.");
            lastResults.put(chatId, msg.toString());
        }

        return name();
    }
}
