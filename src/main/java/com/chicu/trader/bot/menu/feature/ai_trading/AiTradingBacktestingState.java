package com.chicu.trader.bot.menu.feature.ai_trading;

import com.chicu.trader.bot.entity.AiTradingSettings;
import com.chicu.trader.bot.menu.core.MenuState;
import com.chicu.trader.bot.service.AiTradingSettingsService;
import com.chicu.trader.strategy.StrategyType;
import com.chicu.trader.trading.model.BacktestResult;
import com.chicu.trader.trading.service.BacktestService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

@Component
@RequiredArgsConstructor
public class AiTradingBacktestingState implements MenuState {

    private final AiTradingSettingsService settingsService;
    private final BacktestService backtestService;

    // –•—Ä–∞–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –≤—Ä–µ–º—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    private final Map<Long, String> lastResults = new ConcurrentHashMap<>();

    @Override
    public String name() {
        return "ai_trading_settings_backtesting";
    }

    @Override
    public SendMessage render(Long chatId) {
        AiTradingSettings s = settingsService.getOrCreate(chatId);

        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        String strategy = Optional.ofNullable(s.getStrategy()).map(StrategyType::name).orElse("N/A");
        String pairs = Optional.ofNullable(s.getSymbols()).orElse("‚Äî");
        double tp = Optional.ofNullable(s.getRiskThreshold()).orElse(2.0);
        double sl = Optional.ofNullable(s.getMaxDrawdown()).orElse(1.0);
        double commission = Optional.ofNullable(s.getCommission()).orElse(0.1);

        StringBuilder sb = new StringBuilder("*‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:*\n");
        sb.append("‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: `").append(strategy).append("`\n");
        sb.append("‚Ä¢ –ü–∞—Ä—ã: `").append(pairs).append("`\n");
        sb.append(String.format("‚Ä¢ Take-Profit: `%.2f%%`\n", tp));
        sb.append(String.format("‚Ä¢ Stop-Loss: `%.2f%%`\n", sl));
        sb.append(String.format("‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: `%.2f%%`\n", commission));
        sb.append("\n–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç¬ª, —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º.\n");

        if (lastResults.containsKey(chatId)) {
            sb.append("\n").append(lastResults.remove(chatId)); // –ø–æ–∫–∞–∑–∞—Ç—å 1 —Ä–∞–∑
        }

        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();
        buttons.add(List.of(InlineKeyboardButton.builder()
                .text("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç")
                .callbackData("ai_trading_settings_backtesting:run")
                .build()));
        buttons.add(List.of(InlineKeyboardButton.builder()
                .text("‚Äπ –ù–∞–∑–∞–¥")
                .callbackData("ai_trading_settings")
                .build()));

        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(sb.toString())
                .parseMode("Markdown")
                .replyMarkup(InlineKeyboardMarkup.builder().keyboard(buttons).build())
                .build();
    }

    @Override
    public String handleInput(Update u) {
        if (!u.hasCallbackQuery()) return name();
        String data = u.getCallbackQuery().getData();
        Long chatId = u.getCallbackQuery().getMessage().getChatId();

        if ("ai_trading_settings_backtesting:run".equals(data)) {
            BacktestResult result = backtestService.runBacktest(chatId);

            double pnl = result.getTotalPnl();
            double winRate = result.getWinRate() * 100;
            int count = result.getTrades().size();

            String msg = String.format("""
                *üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞:*
                ‚Ä¢ –°–¥–µ–ª–æ–∫: `%d`
                ‚Ä¢ Win-rate: `%.2f%%`
                ‚Ä¢ –û–±—â–∏–π PnL: `%.2f%%`

                üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∏–∑–º–µ–Ω–∏—Ç–µ TP/SL –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
                """, count, winRate, pnl * 100);

            lastResults.put(chatId, msg);
            return name(); // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —Ç–æ –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        }

        if ("ai_trading_settings".equals(data)) {
            return "ai_trading_settings";
        }

        return name();
    }
}
