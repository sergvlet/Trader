// src/main/java/com/chicu/trader/bot/menu/feature/registration/RegistrationTariffsState.java
package com.chicu.trader.bot.menu.feature.registration;

import com.chicu.trader.bot.entity.User;
import com.chicu.trader.bot.menu.core.MenuService;
import com.chicu.trader.bot.menu.core.MenuState;
import com.chicu.trader.bot.repository.UserRepository;
import lombok.NonNull;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Slf4j
@Component
public class RegistrationTariffsState implements MenuState {

    private final UserRepository userRepo;
    private final InlineKeyboardMarkup keyboard;
    private final DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");

    public RegistrationTariffsState(UserRepository userRepo) {
        this.userRepo = userRepo;

        InlineKeyboardButton trial2w = InlineKeyboardButton.builder()
            .text("üéÅ –ü—Ä–æ–±–Ω—ã–π 2 –Ω–µ–¥–µ–ª–∏")
            .callbackData("register_plan:trial_2weeks")
            .build();
        InlineKeyboardButton m1 = InlineKeyboardButton.builder()
            .text("1 –º–µ—Å—è—Ü")
            .callbackData("register_plan:1month")
            .build();
        InlineKeyboardButton m3 = InlineKeyboardButton.builder()
            .text("3 –º–µ—Å—è—Ü–∞")
            .callbackData("register_plan:3months")
            .build();
        InlineKeyboardButton m6 = InlineKeyboardButton.builder()
            .text("6 –º–µ—Å—è—Ü–µ–≤")
            .callbackData("register_plan:6months")
            .build();
        InlineKeyboardButton y1 = InlineKeyboardButton.builder()
            .text("1 –≥–æ–¥")
            .callbackData("register_plan:1year")
            .build();
        InlineKeyboardButton back = InlineKeyboardButton.builder()
            .text("‚Äπ –ù–∞–∑–∞–¥")
            .callbackData(MenuService.BACK)
            .build();

        this.keyboard = InlineKeyboardMarkup.builder()
            .keyboard(List.of(
                List.of(trial2w, m1),
                List.of(m3, m6),
                List.of(y1),
                List.of(back)
            ))
            .build();
    }

    @Override
    public String name() {
        return "registration_tariffs";
    }

    @Override
    public SendMessage render(Long chatId) {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        User user = userRepo.findById(chatId).orElseThrow();
        LocalDateTime regDateTime = user.getRegistrationDate();
        String regDate = regDateTime.format(dtf);

        String text = "*–¢–∞—Ä–∏—Ñ—ã*  \n" +
                      "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + regDate + "  \n\n" +
                      "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–¥–ø–∏—Å–∫–∏:";
        return SendMessage.builder()
            .chatId(chatId.toString())
            .text(text)
            .parseMode("Markdown")
            .replyMarkup(keyboard)
            .build();
    }

    @Override
    public @NonNull String handleInput(Update update) {
        if (!update.hasCallbackQuery()) {
            return name();
        }
        String data = update.getCallbackQuery().getData();
        Long chatId = update.getCallbackQuery().getMessage().getChatId();

        if (data.startsWith("register_plan:")) {
            String plan = data.substring("register_plan:".length());
            log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –≤—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ {}", chatId, plan);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –≤ –ë–î –∏/–∏–ª–∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É
            return MenuService.BACK;
        }
        if (MenuService.BACK.equals(data)) {
            return MenuService.BACK;
        }
        return name();
    }
}
